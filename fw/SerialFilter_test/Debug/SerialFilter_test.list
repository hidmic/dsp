
SerialFilter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b34  08002b34  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b3c  08002b3c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000018  08002b5c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08002b5c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba9f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ef  00000000  00000000  0002bae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151ba  00000000  00000000  0002ec60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007de7  00000000  00000000  00043e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000849cf  00000000  00000000  0004bc01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d05d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000d064c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b04 	.word	0x08002b04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08002b04 	.word	0x08002b04

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <cmp_init>:
  return false;
}

void cmp_init(cmp_ctx_t *ctx, void *buf, cmp_reader read,
                                         cmp_skipper skip,
                                         cmp_writer write) {
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
  ctx->error = ERROR_NONE;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
  ctx->buf = buf;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	605a      	str	r2, [r3, #4]
  ctx->read = read;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	609a      	str	r2, [r3, #8]
  ctx->skip = skip;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	60da      	str	r2, [r3, #12]
  ctx->write = write;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	611a      	str	r2, [r3, #16]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <rdsp_mp_write>:
#include "rdsp.h"

static size_t rdsp_mp_write(struct cmp_ctx_s *mp_ctx,
                            const void *data, size_t count) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  rdsp_context_t *ctx = (rdsp_context_t *)mp_ctx->buf;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	617b      	str	r3, [r7, #20]
  return ctx->write(data, count, ctx->arg);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	69d2      	ldr	r2, [r2, #28]
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	68b8      	ldr	r0, [r7, #8]
 800052a:	4798      	blx	r3
 800052c:	4603      	mov	r3, r0
}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <rdsp_mp_read>:

static bool rdsp_mp_read(struct cmp_ctx_s *mp_ctx,
                         void *data, size_t limit) {
 8000536:	b580      	push	{r7, lr}
 8000538:	b086      	sub	sp, #24
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
  rdsp_context_t *ctx = (rdsp_context_t *)mp_ctx->buf;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	617b      	str	r3, [r7, #20]
  return ctx->read(data, limit, ctx->arg);
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	69d2      	ldr	r2, [r2, #28]
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	68b8      	ldr	r0, [r7, #8]
 8000554:	4798      	blx	r3
 8000556:	4603      	mov	r3, r0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <rdsp_context_init>:

void
rdsp_context_init(rdsp_context_t *context, rdsp_read_t read,
                  rdsp_write_t write, void *arg) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	603b      	str	r3, [r7, #0]
  context->read = read;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	615a      	str	r2, [r3, #20]
  context->write = write;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	619a      	str	r2, [r3, #24]
  context->arg = arg;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	61da      	str	r2, [r3, #28]

  cmp_init(&context->mp_context, context, rdsp_mp_read, NULL, rdsp_mp_write);
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <rdsp_context_init+0x38>)
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <rdsp_context_init+0x3c>)
 800058a:	68f9      	ldr	r1, [r7, #12]
 800058c:	f7ff ffa2 	bl	80004d4 <cmp_init>
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0800050d 	.word	0x0800050d
 800059c:	08000537 	.word	0x08000537

080005a0 <arm_fir_init_q15>:
  arm_fir_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	607a      	str	r2, [r7, #4]
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	460b      	mov	r3, r1
 80005ae:	817b      	strh	r3, [r7, #10]
#ifndef ARM_MATH_CM0

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if((numTaps < 4u) || (numTaps & 0x1u))
 80005b0:	897b      	ldrh	r3, [r7, #10]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d904      	bls.n	80005c0 <arm_fir_init_q15+0x20>
 80005b6:	897b      	ldrh	r3, [r7, #10]
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d002      	beq.n	80005c6 <arm_fir_init_q15+0x26>
  {
    status = ARM_MATH_ARGUMENT_ERROR;
 80005c0:	23ff      	movs	r3, #255	; 0xff
 80005c2:	75fb      	strb	r3, [r7, #23]
 80005c4:	e016      	b.n	80005f4 <arm_fir_init_q15+0x54>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	897a      	ldrh	r2, [r7, #10]
 80005ca:	801a      	strh	r2, [r3, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	609a      	str	r2, [r3, #8]

    /* Clear the state buffer.  The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(q15_t));
 80005d2:	897a      	ldrh	r2, [r7, #10]
 80005d4:	6a3b      	ldr	r3, [r7, #32]
 80005d6:	4413      	add	r3, r2
 80005d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80005dc:	3b01      	subs	r3, #1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	461a      	mov	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f002 fa85 	bl	8002af4 <memset>

    /* Assign state pointer */
    S->pState = pState;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]

    status = ARM_MATH_SUCCESS;
 80005f0:	2300      	movs	r3, #0
 80005f2:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80005f4:	f997 3017 	ldrsb.w	r3, [r7, #23]

  return (status);

#endif /*  #ifndef ARM_MATH_CM0 */

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <arm_fir_q15>:
void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8000600:	b490      	push	{r4, r7}
 8000602:	b0f4      	sub	sp, #464	; 0x1d0
 8000604:	af00      	add	r7, sp, #0
 8000606:	f107 040c 	add.w	r4, r7, #12
 800060a:	6020      	str	r0, [r4, #0]
 800060c:	f107 0008 	add.w	r0, r7, #8
 8000610:	6001      	str	r1, [r0, #0]
 8000612:	1d39      	adds	r1, r7, #4
 8000614:	600a      	str	r2, [r1, #0]
 8000616:	463a      	mov	r2, r7
 8000618:	6013      	str	r3, [r2, #0]
  q15_t *pState = S->pState;                     /* State pointer */
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000626:	601a      	str	r2, [r3, #0]
  q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  q15_t *px1;                                    /* Temporary q15 pointer for state buffer */
  q31_t *pb;                                     /* Temporary pointer for coefficient buffer */
  q31_t *px2;                                    /* Temporary q31 pointer for SIMD state buffer accesses */
  q31_t x0, x1, x2, x3, c0;                      /* Temporary variables to hold SIMD state and coefficient values */
  q63_t acc0, acc1, acc2, acc3;                  /* Accumulators */
  uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  uint32_t tapCnt, blkCnt;                       /* Loop counters */

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800064c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000650:	3b01      	subs	r3, #1
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	441a      	add	r2, r3
 8000656:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800065a:	601a      	str	r2, [r3, #0]
   *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]   
   *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]   
   *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]   
   *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]   
   */
  blkCnt = blockSize >> 2;
 800065c:	463b      	mov	r3, r7
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.   
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8000666:	e389      	b.n	8000d7c <arm_fir_q15+0x77c>
  {
    /* Copy four new input samples into the state buffer.   
     ** Use 32-bit SIMD to move the 16-bit data.  Only requires two copies. */
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	1d11      	adds	r1, r2, #4
 8000670:	6019      	str	r1, [r3, #0]
 8000672:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000676:	680b      	ldr	r3, [r1, #0]
 8000678:	1d18      	adds	r0, r3, #4
 800067a:	6008      	str	r0, [r1, #0]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	601a      	str	r2, [r3, #0]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	1d11      	adds	r1, r2, #4
 8000688:	6019      	str	r1, [r3, #0]
 800068a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800068e:	680b      	ldr	r3, [r1, #0]
 8000690:	1d18      	adds	r0, r3, #4
 8000692:	6008      	str	r0, [r1, #0]
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]

    /* Set all accumulators to zero */
    acc0 = 0;
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	f04f 0400 	mov.w	r4, #0
 80006a0:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80006a4:	e9c2 3400 	strd	r3, r4, [r2]
    acc1 = 0;
 80006a8:	f04f 0300 	mov.w	r3, #0
 80006ac:	f04f 0400 	mov.w	r4, #0
 80006b0:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80006b4:	e9c2 3400 	strd	r3, r4, [r2]
    acc2 = 0;
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	f04f 0400 	mov.w	r4, #0
 80006c0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80006c4:	e9c2 3400 	strd	r3, r4, [r2]
    acc3 = 0;
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	f04f 0400 	mov.w	r4, #0
 80006d0:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80006d4:	e9c2 3400 	strd	r3, r4, [r2]

    /* Initialize state pointer of type q15 */
    px1 = pState;
 80006d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    /* Initialize coeff pointer of type q31 */
    pb = (q31_t *) (pCoeffs);
 80006e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80006e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    /* Read the first two samples from the state buffer:  x[n-N], x[n-N-1] */
    x0 = *(q31_t *) (px1++);
 80006ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80006ee:	1c9a      	adds	r2, r3, #2
 80006f0:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    /* Read the third and forth samples from the state buffer: x[n-N-1], x[n-N-2] */
    x1 = *(q31_t *) (px1++);
 80006fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80006fe:	1c9a      	adds	r2, r3, #2
 8000700:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

    /* Loop over the number of taps.  Unroll by a factor of 4.   
     ** Repeat until we've computed numTaps-4 coefficients. */
    tapCnt = numTaps >> 2;
 800070a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800070e:	089b      	lsrs	r3, r3, #2
 8000710:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    do
    {
      /* Read the first two coefficients using SIMD:  b[N] and b[N-1] coefficients */
      c0 = *(pb++);
 8000714:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000718:	1d1a      	adds	r2, r3, #4
 800071a:	f8c7 21c8 	str.w	r2, [r7, #456]	; 0x1c8
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

      /* acc0 +=  b[N] * x[n-N] + b[N-1] * x[n-N-1] */
      acc0 = __SMLALD(x0, c0, acc0);
 8000724:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8000728:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800072c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000730:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000734:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8000738:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800073c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000740:	e9c2 3400 	strd	r3, r4, [r2]
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 8000744:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000748:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800074c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000750:	e9c2 3400 	strd	r3, r4, [r2]

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000764:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8000768:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800076c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000770:	600a      	str	r2, [r1, #0]
 8000772:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000776:	6053      	str	r3, [r2, #4]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 8000778:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800077c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000780:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000784:	e9c2 3400 	strd	r3, r4, [r2]

      /* acc1 +=  b[N] * x[n-N-1] + b[N-1] * x[n-N-2] */
      acc1 = __SMLALD(x1, c0, acc1);
 8000788:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800078c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000790:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000794:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000798:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800079c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80007a0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
  llr.w64 = acc;
 80007a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007a8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80007ac:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80007b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80007c0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80007c4:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80007c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007cc:	600a      	str	r2, [r1, #0]
 80007ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007d2:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80007d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80007dc:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80007e0:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read state x[n-N-2], x[n-N-3] */
      x2 = *(q31_t *) (px1++);
 80007e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80007e8:	1c9a      	adds	r2, r3, #2
 80007ea:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

      /* Read state x[n-N-3], x[n-N-4] */
      x3 = *(q31_t *) (px1++);
 80007f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80007f8:	1c9a      	adds	r2, r3, #2
 80007fa:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

      /* acc2 +=  b[N] * x[n-N-2] + b[N-1] * x[n-N-3] */
      acc2 = __SMLALD(x2, c0, acc2);
 8000804:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8000808:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800080c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000810:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000814:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8000818:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800081c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
  llr.w64 = acc;
 8000820:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000824:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8000828:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800082c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800083c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8000840:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000844:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000848:	600a      	str	r2, [r1, #0]
 800084a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800084e:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000854:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000858:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800085c:	e9c2 3400 	strd	r3, r4, [r2]

      /* acc3 +=  b[N] * x[n-N-3] + b[N-1] * x[n-N-4] */
      acc3 = __SMLALD(x3, c0, acc3);
 8000860:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000864:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000868:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800086c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000870:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8000874:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8000878:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800087c:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000880:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000884:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000888:	e9d3 3400 	ldrd	r3, r4, [r3]
 800088c:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80008a0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80008a4:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80008a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008ac:	600a      	str	r2, [r1, #0]
 80008ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80008b2:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80008b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008bc:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80008c0:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read coefficients b[N-2], b[N-3] */
      c0 = *(pb++);
 80008c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80008c8:	1d1a      	adds	r2, r3, #4
 80008ca:	f8c7 21c8 	str.w	r2, [r7, #456]	; 0x1c8
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

      /* acc0 +=  b[N-2] * x[n-N-2] + b[N-3] * x[n-N-3] */
      acc0 = __SMLALD(x2, c0, acc0);
 80008d4:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80008d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80008dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80008e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008e4:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80008e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80008ec:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008f0:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 80008f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000900:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8000914:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8000918:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800091c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000920:	600a      	str	r2, [r1, #0]
 8000922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000926:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000930:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000934:	e9c2 3400 	strd	r3, r4, [r2]

      /* acc1 +=  b[N-2] * x[n-N-3] + b[N-3] * x[n-N-4] */
      acc1 = __SMLALD(x3, c0, acc1);
 8000938:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800093c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000940:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000944:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000948:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800094c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8000950:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000954:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000958:	f107 0220 	add.w	r2, r7, #32
 800095c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000960:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000964:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000978:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800097c:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000980:	f107 0120 	add.w	r1, r7, #32
 8000984:	600a      	str	r2, [r1, #0]
 8000986:	f107 0220 	add.w	r2, r7, #32
 800098a:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000994:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8000998:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read state x[n-N-4], x[n-N-5] */
      x0 = *(q31_t *) (px1++);
 800099c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009a0:	1c9a      	adds	r2, r3, #2
 80009a2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

      /* Read state x[n-N-5], x[n-N-6] */
      x1 = *(q31_t *) (px1++);
 80009ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009b0:	1c9a      	adds	r2, r3, #2
 80009b2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

      /* acc2 +=  b[N-2] * x[n-N-4] + b[N-3] * x[n-N-5] */
      acc2 = __SMLALD(x0, c0, acc2);
 80009bc:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80009c0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80009c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80009c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 80009d0:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80009d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80009d8:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 80009dc:	f107 0218 	add.w	r2, r7, #24
 80009e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009e8:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80009fc:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8000a00:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000a04:	f107 0118 	add.w	r1, r7, #24
 8000a08:	600a      	str	r2, [r1, #0]
 8000a0a:	f107 0218 	add.w	r2, r7, #24
 8000a0e:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a18:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000a1c:	e9c2 3400 	strd	r3, r4, [r2]

      /* acc3 +=  b[N-2] * x[n-N-5] + b[N-3] * x[n-N-6] */
      acc3 = __SMLALD(x1, c0, acc3);
 8000a20:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8000a24:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000a28:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000a2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a30:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8000a34:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000a38:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000a3c:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000a40:	f107 0210 	add.w	r2, r7, #16
 8000a44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a4c:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000a60:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8000a64:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	600a      	str	r2, [r1, #0]
 8000a6e:	f107 0210 	add.w	r2, r7, #16
 8000a72:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a7c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8000a80:	e9c2 3400 	strd	r3, r4, [r2]
      tapCnt--;
 8000a84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    }
    while(tapCnt > 0u);
 8000a8e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f47f ae3e 	bne.w	8000714 <arm_fir_q15+0x114>

    /* If the filter length is not a multiple of 4, compute the remaining filter taps.   
     ** This is always be 2 taps since the filter length is even. */
    if((numTaps & 0x3u) != 0u)
 8000a98:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 80f4 	beq.w	8000c8e <arm_fir_q15+0x68e>
    {
      /* Read 2 coefficients */
      c0 = *(pb++);
 8000aa6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000aaa:	1d1a      	adds	r2, r3, #4
 8000aac:	f8c7 21c8 	str.w	r2, [r7, #456]	; 0x1c8
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      /* Fetch 4 state variables */
      x2 = *(q31_t *) (px1++);
 8000ab6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000aba:	1c9a      	adds	r2, r3, #2
 8000abc:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
      x3 = *(q31_t *) (px1++);
 8000ac6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000aca:	1c9a      	adds	r2, r3, #2
 8000acc:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

      /* Perform the multiply-accumulates */
      acc0 = __SMLALD(x0, c0, acc0);
 8000ad6:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8000ada:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8000ade:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ae6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000aea:	6010      	str	r0, [r2, #0]
 8000aec:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000af0:	6011      	str	r1, [r2, #0]
 8000af2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000af6:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000afa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000afe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b06:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000b0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b14:	685c      	ldr	r4, [r3, #4]
 8000b16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	4623      	mov	r3, r4
 8000b24:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000b28:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000b2c:	600a      	str	r2, [r1, #0]
 8000b2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000b32:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000b34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b3c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000b40:	e9c2 3400 	strd	r3, r4, [r2]
      acc1 = __SMLALD(x1, c0, acc1);
 8000b44:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8000b48:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8000b4c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000b50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b54:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000b58:	6010      	str	r0, [r2, #0]
 8000b5a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000b5e:	6011      	str	r1, [r2, #0]
 8000b60:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000b64:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000b68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000b6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b74:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000b78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b82:	685c      	ldr	r4, [r3, #4]
 8000b84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	4623      	mov	r3, r4
 8000b92:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000b96:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b9a:	600a      	str	r2, [r1, #0]
 8000b9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ba0:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000ba2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ba6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000baa:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8000bae:	e9c2 3400 	strd	r3, r4, [r2]
      acc2 = __SMLALD(x2, c0, acc2);
 8000bb2:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8000bb6:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8000bba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bc2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000bc6:	6010      	str	r0, [r2, #0]
 8000bc8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000bcc:	6011      	str	r1, [r2, #0]
 8000bce:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000bd2:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000bd6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000bda:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000be2:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000be6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bf0:	685c      	ldr	r4, [r3, #4]
 8000bf2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	4623      	mov	r3, r4
 8000c00:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000c04:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000c08:	600a      	str	r2, [r1, #0]
 8000c0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c0e:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c18:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000c1c:	e9c2 3400 	strd	r3, r4, [r2]
      acc3 = __SMLALD(x3, c0, acc3);
 8000c20:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8000c24:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8000c28:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c30:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000c34:	6010      	str	r0, [r2, #0]
 8000c36:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000c3a:	6011      	str	r1, [r2, #0]
 8000c3c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000c40:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000c44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000c4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c50:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000c54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c5e:	685c      	ldr	r4, [r3, #4]
 8000c60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	4623      	mov	r3, r4
 8000c6e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000c72:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c76:	600a      	str	r2, [r1, #0]
 8000c78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c7c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000c7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c86:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8000c8a:	e9c2 3400 	strd	r3, r4, [r2]
     ** Then store the 4 outputs in the destination buffer. */

#ifndef ARM_MATH_BIG_ENDIAN

    *__SIMD32(pDst)++ =
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 8000c8e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000c92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	f04f 0400 	mov.w	r4, #0
 8000c9e:	0bcb      	lsrs	r3, r1, #15
 8000ca0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000ca4:	13d4      	asrs	r4, r2, #15
 8000ca6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8000caa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000cae:	f303 030f 	ssat	r3, #16, r3
 8000cb2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8000cb6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000cc0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	f04f 0400 	mov.w	r4, #0
 8000ccc:	0bcb      	lsrs	r3, r1, #15
 8000cce:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000cd2:	13d4      	asrs	r4, r2, #15
 8000cd4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8000cd8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000cdc:	f303 030f 	ssat	r3, #16, r3
 8000ce0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000ce4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	4318      	orrs	r0, r3
    *__SIMD32(pDst)++ =
 8000cec:	1d3a      	adds	r2, r7, #4
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	1d19      	adds	r1, r3, #4
 8000cf2:	6011      	str	r1, [r2, #0]
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 8000cf4:	4602      	mov	r2, r0
    *__SIMD32(pDst)++ =
 8000cf6:	601a      	str	r2, [r3, #0]
    *__SIMD32(pDst)++ =
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 8000cf8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000cfc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	f04f 0400 	mov.w	r4, #0
 8000d08:	0bcb      	lsrs	r3, r1, #15
 8000d0a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d0e:	13d4      	asrs	r4, r2, #15
 8000d10:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8000d14:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000d18:	f303 030f 	ssat	r3, #16, r3
 8000d1c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8000d20:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d24:	b298      	uxth	r0, r3
 8000d26:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000d2a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	f04f 0400 	mov.w	r4, #0
 8000d36:	0bcb      	lsrs	r3, r1, #15
 8000d38:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d3c:	13d4      	asrs	r4, r2, #15
 8000d3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000d46:	f303 030f 	ssat	r3, #16, r3
 8000d4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d52:	041b      	lsls	r3, r3, #16
 8000d54:	4318      	orrs	r0, r3
    *__SIMD32(pDst)++ =
 8000d56:	1d3a      	adds	r2, r7, #4
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	1d19      	adds	r1, r3, #4
 8000d5c:	6011      	str	r1, [r2, #0]
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 8000d5e:	4602      	mov	r2, r0
    *__SIMD32(pDst)++ =
 8000d60:	601a      	str	r2, [r3, #0]
      __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN       */

    /* Advance the state pointer by 4 to process the next group of 4 samples */
    pState = pState + 4;
 8000d62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f103 0208 	add.w	r2, r3, #8
 8000d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d70:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8000d72:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  while(blkCnt > 0u)
 8000d7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f47f ac71 	bne.w	8000668 <arm_fir_q15+0x68>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.   
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8000d86:	463b      	mov	r3, r7
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  while(blkCnt > 0u)
 8000d92:	e099      	b.n	8000ec8 <arm_fir_q15+0x8c8>
  {
    /* Copy two samples into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	1c91      	adds	r1, r2, #2
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	6019      	str	r1, [r3, #0]
 8000da2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c98      	adds	r0, r3, #2
 8000daa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000dae:	6008      	str	r0, [r1, #0]
 8000db0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000db4:	801a      	strh	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	f04f 0400 	mov.w	r4, #0
 8000dbe:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000dc2:	e9c2 3400 	strd	r3, r4, [r2]

    /* Use SIMD to hold states and coefficients */
    px2 = (q31_t *) pState;
 8000dc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    pb = (q31_t *) (pCoeffs);
 8000dd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000dd4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tapCnt = numTaps >> 1;
 8000dd8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ddc:	085b      	lsrs	r3, r3, #1
 8000dde:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    do
    {
      acc0 = __SMLALD(*px2++, *(pb++), acc0);
 8000de2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000de6:	1d1a      	adds	r2, r3, #4
 8000de8:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000df4:	1d1a      	adds	r2, r3, #4
 8000df6:	f8c7 21c8 	str.w	r2, [r7, #456]	; 0x1c8
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000e02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e06:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e0a:	6010      	str	r0, [r2, #0]
 8000e0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000e10:	6011      	str	r1, [r2, #0]
 8000e12:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000e16:	e9c2 3400 	strd	r3, r4, [r2]
  llr.w64 = acc;
 8000e1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000e1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e26:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000e2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e34:	685c      	ldr	r4, [r3, #4]
 8000e36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	4623      	mov	r3, r4
 8000e44:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000e48:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e4c:	600a      	str	r2, [r1, #0]
 8000e4e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000e52:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8000e54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e5c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000e60:	e9c2 3400 	strd	r3, r4, [r2]
      tapCnt--;
 8000e64:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }
    while(tapCnt > 0u);
 8000e6e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1b5      	bne.n	8000de2 <arm_fir_q15+0x7e2>

    /* The result is in 2.30 format.  Convert to 1.15 with saturation.   
     ** Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8000e76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000e7a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	f04f 0400 	mov.w	r4, #0
 8000e86:	0bcb      	lsrs	r3, r1, #15
 8000e88:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000e8c:	13d4      	asrs	r4, r2, #15
 8000e8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e96:	f303 030f 	ssat	r3, #16, r3
 8000e9a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e9e:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1c99      	adds	r1, r3, #2
 8000ea8:	1d3a      	adds	r2, r7, #4
 8000eaa:	6011      	str	r1, [r2, #0]
 8000eac:	b202      	sxth	r2, r0
 8000eae:	801a      	strh	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1;
 8000eb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	1c9a      	adds	r2, r3, #2
 8000eb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8000ebe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  while(blkCnt > 0u)
 8000ec8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f af61 	bne.w	8000d94 <arm_fir_q15+0x794>
  /* Processing is complete.   
   ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.   
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ede:	601a      	str	r2, [r3, #0]

  /* Calculation of count for copying integer writes */
  tapCnt = (numTaps - 1u) >> 2;
 8000ee0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

  while(tapCnt > 0u)
 8000eec:	e01c      	b.n	8000f28 <arm_fir_q15+0x928>
  {
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8000eee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	1d11      	adds	r1, r2, #4
 8000ef6:	6019      	str	r1, [r3, #0]
 8000ef8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000efc:	680b      	ldr	r3, [r1, #0]
 8000efe:	1d18      	adds	r0, r3, #4
 8000f00:	6008      	str	r0, [r1, #0]
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	601a      	str	r2, [r3, #0]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8000f06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	1d11      	adds	r1, r2, #4
 8000f0e:	6019      	str	r1, [r3, #0]
 8000f10:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000f14:	680b      	ldr	r3, [r1, #0]
 8000f16:	1d18      	adds	r0, r3, #4
 8000f18:	6008      	str	r0, [r1, #0]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	601a      	str	r2, [r3, #0]

    tapCnt--;
 8000f1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  while(tapCnt > 0u)
 8000f28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1de      	bne.n	8000eee <arm_fir_q15+0x8ee>

  }

  /* Calculation of count for remaining q15_t data */
  tapCnt = (numTaps - 1u) % 0x4u;
 8000f30:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f34:	3b01      	subs	r3, #1
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

  /* copy remaining data */
  while(tapCnt > 0u)
 8000f3e:	e015      	b.n	8000f6c <arm_fir_q15+0x96c>
  {
    *pStateCurnt++ = *pState++;
 8000f40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	1c91      	adds	r1, r2, #2
 8000f48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f4c:	6019      	str	r1, [r3, #0]
 8000f4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1c98      	adds	r0, r3, #2
 8000f56:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000f5a:	6008      	str	r0, [r1, #0]
 8000f5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f60:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    tapCnt--;
 8000f62:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  while(tapCnt > 0u)
 8000f6c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <arm_fir_q15+0x940>
    tapCnt--;
  }

#endif /* #ifndef ARM_MATH_CM0 */

}
 8000f74:	bf00      	nop
 8000f76:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc90      	pop	{r4, r7}
 8000f7e:	4770      	bx	lr

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f90d 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f001 fc7c 	bl	80028b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f917 	bl	8001216 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001000:	f000 f8ed 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000014 	.word	0x20000014
 800101c:	20000004 	.word	0x20000004
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000004 	.word	0x20000004
 8001048:	20000078 	.word	0x20000078

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000078 	.word	0x20000078

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff47 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff5c 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffb0 	bl	8001184 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e159      	b.n	8001500 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8148 	bne.w	80014fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x4a>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b12      	cmp	r3, #18
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d00b      	beq.n	8001316 <HAL_GPIO_Init+0xe6>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130a:	2b11      	cmp	r3, #17
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b12      	cmp	r3, #18
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a2 	beq.w	80014fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a51      	ldr	r2, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x202>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x1fe>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_GPIO_Init+0x2f4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x1fa>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a45      	ldr	r2, [pc, #276]	; (8001528 <HAL_GPIO_Init+0x2f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x1f6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a44      	ldr	r2, [pc, #272]	; (800152c <HAL_GPIO_Init+0x2fc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x1f2>
 800141e:	2304      	movs	r3, #4
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001422:	2307      	movs	r3, #7
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x300>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x300>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_GPIO_Init+0x300>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a0:	4a23      	ldr	r2, [pc, #140]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f aea2 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e22d      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d075      	beq.n	8001672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001586:	4ba3      	ldr	r3, [pc, #652]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b04      	cmp	r3, #4
 8001590:	d00c      	beq.n	80015ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	4b9d      	ldr	r3, [pc, #628]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4b99      	ldr	r3, [pc, #612]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d05b      	beq.n	8001670 <HAL_RCC_OscConfig+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d157      	bne.n	8001670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e208      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x74>
 80015ce:	4b91      	ldr	r3, [pc, #580]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a90      	ldr	r2, [pc, #576]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a87      	ldr	r2, [pc, #540]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a83      	ldr	r2, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a80      	ldr	r2, [pc, #512]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fd14 	bl	800104c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fd10 	bl	800104c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1cd      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xc0>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fd00 	bl	800104c <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fcfc 	bl	800104c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1b9      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0xe8>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e18d      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4952      	ldr	r1, [pc, #328]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e03a      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fcb5 	bl	800104c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fcb1 	bl	800104c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e16e      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4940      	ldr	r1, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fc94 	bl	800104c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fc90 	bl	800104c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e14d      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d030      	beq.n	80017b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fc74 	bl	800104c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fc70 	bl	800104c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e12d      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x200>
 8001786:	e015      	b.n	80017b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fc5d 	bl	800104c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fc59 	bl	800104c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e116      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a0 	beq.w	8001902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d121      	bne.n	8001842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fc1f 	bl	800104c <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e011      	b.n	8001836 <HAL_RCC_OscConfig+0x2ce>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
 8001820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff fc12 	bl	800104c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0cf      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x2f0>
 800184a:	4b66      	ldr	r3, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a65      	ldr	r2, [pc, #404]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x32a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x312>
 8001860:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x32a>
 800187a:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a59      	ldr	r2, [pc, #356]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a56      	ldr	r2, [pc, #344]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fbd7 	bl	800104c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fbd3 	bl	800104c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e08e      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x33a>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fbc1 	bl	800104c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fbbd 	bl	800104c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e078      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a3a      	ldr	r2, [pc, #232]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d064      	beq.n	80019d4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190a:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d05c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d141      	bne.n	80019a2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x480>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fb92 	bl	800104c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fb8e 	bl	800104c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e04b      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	3b01      	subs	r3, #1
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	491d      	ldr	r1, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_RCC_OscConfig+0x480>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fb67 	bl	800104c <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fb63 	bl	800104c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e020      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x41a>
 80019a0:	e018      	b.n	80019d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_OscConfig+0x480>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb50 	bl	800104c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fb4c 	bl	800104c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_RCC_OscConfig+0x47c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x448>
 80019ce:	e001      	b.n	80019d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000
 80019e4:	40023800 	.word	0x40023800
 80019e8:	42470060 	.word	0x42470060

080019ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0ca      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d90c      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0b6      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a58:	4b52      	ldr	r3, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	494c      	ldr	r1, [pc, #304]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d044      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d119      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e07d      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e06d      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e065      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4933      	ldr	r1, [pc, #204]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff fab6 	bl	800104c <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff fab2 	bl	800104c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e04d      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d20c      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e030      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4915      	ldr	r1, [pc, #84]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b72:	f000 f81d 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b76:	4601      	mov	r1, r0
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	fa21 f303 	lsr.w	r3, r1, r3
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fa18 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08002b1c 	.word	0x08002b1c
 8001bac:	20000014 	.word	0x20000014

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d007      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x32>
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d008      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x38>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80b4 	bne.w	8001d44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bde:	60bb      	str	r3, [r7, #8]
       break;
 8001be0:	e0b3      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001be4:	60bb      	str	r3, [r7, #8]
      break;
 8001be6:	e0b0      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf2:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04a      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	f04f 0400 	mov.w	r4, #0
 8001c08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	ea03 0501 	and.w	r5, r3, r1
 8001c14:	ea04 0602 	and.w	r6, r4, r2
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4632      	mov	r2, r6
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	f04f 0400 	mov.w	r4, #0
 8001c24:	0154      	lsls	r4, r2, #5
 8001c26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c2a:	014b      	lsls	r3, r1, #5
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4622      	mov	r2, r4
 8001c30:	1b49      	subs	r1, r1, r5
 8001c32:	eb62 0206 	sbc.w	r2, r2, r6
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	f04f 0400 	mov.w	r4, #0
 8001c3e:	0194      	lsls	r4, r2, #6
 8001c40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c44:	018b      	lsls	r3, r1, #6
 8001c46:	1a5b      	subs	r3, r3, r1
 8001c48:	eb64 0402 	sbc.w	r4, r4, r2
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	00e2      	lsls	r2, r4, #3
 8001c56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c5a:	00d9      	lsls	r1, r3, #3
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	195b      	adds	r3, r3, r5
 8001c62:	eb44 0406 	adc.w	r4, r4, r6
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	0262      	lsls	r2, r4, #9
 8001c70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c74:	0259      	lsls	r1, r3, #9
 8001c76:	460b      	mov	r3, r1
 8001c78:	4614      	mov	r4, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f04f 0400 	mov.w	r4, #0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	f7fe faa4 	bl	80001d4 <__aeabi_uldivmod>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e049      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	f04f 0400 	mov.w	r4, #0
 8001c9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	ea03 0501 	and.w	r5, r3, r1
 8001caa:	ea04 0602 	and.w	r6, r4, r2
 8001cae:	4629      	mov	r1, r5
 8001cb0:	4632      	mov	r2, r6
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f04f 0400 	mov.w	r4, #0
 8001cba:	0154      	lsls	r4, r2, #5
 8001cbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cc0:	014b      	lsls	r3, r1, #5
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4622      	mov	r2, r4
 8001cc6:	1b49      	subs	r1, r1, r5
 8001cc8:	eb62 0206 	sbc.w	r2, r2, r6
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	f04f 0400 	mov.w	r4, #0
 8001cd4:	0194      	lsls	r4, r2, #6
 8001cd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cda:	018b      	lsls	r3, r1, #6
 8001cdc:	1a5b      	subs	r3, r3, r1
 8001cde:	eb64 0402 	sbc.w	r4, r4, r2
 8001ce2:	f04f 0100 	mov.w	r1, #0
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	00e2      	lsls	r2, r4, #3
 8001cec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cf0:	00d9      	lsls	r1, r3, #3
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	195b      	adds	r3, r3, r5
 8001cf8:	eb44 0406 	adc.w	r4, r4, r6
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	02a2      	lsls	r2, r4, #10
 8001d06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d0a:	0299      	lsls	r1, r3, #10
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4614      	mov	r4, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f04f 0400 	mov.w	r4, #0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4623      	mov	r3, r4
 8001d1e:	f7fe fa59 	bl	80001d4 <__aeabi_uldivmod>
 8001d22:	4603      	mov	r3, r0
 8001d24:	460c      	mov	r4, r1
 8001d26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	60bb      	str	r3, [r7, #8]
      break;
 8001d42:	e002      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d46:	60bb      	str	r3, [r7, #8]
      break;
 8001d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000014 	.word	0x20000014

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08002b2c 	.word	0x08002b2c

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08002b2c 	.word	0x08002b2c

08001dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e03f      	b.n	8001e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fd86 	bl	8002900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f9b1 	bl	8002174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b088      	sub	sp, #32
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f040 8083 	bne.w	8001f8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Transmit+0x2e>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e07b      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Transmit+0x40>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e074      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2221      	movs	r2, #33	; 0x21
 8001eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f8c8 	bl	800104c <HAL_GetTick>
 8001ebc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	88fa      	ldrh	r2, [r7, #6]
 8001ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001eca:	e042      	b.n	8001f52 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee2:	d122      	bne.n	8001f2a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f8f6 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e046      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	e017      	b.n	8001f52 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3301      	adds	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e013      	b.n	8001f52 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f8d3 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e023      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1b7      	bne.n	8001ecc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f8ba 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e00a      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	f040 8090 	bne.w	80020d6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_UART_Receive+0x2e>
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e088      	b.n	80020d8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_UART_Receive+0x40>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e081      	b.n	80020d8 <HAL_UART_Receive+0x144>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2222      	movs	r2, #34	; 0x22
 8001fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fea:	f7ff f82f 	bl	800104c <HAL_GetTick>
 8001fee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ffc:	e05c      	b.n	80020b8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002014:	d12b      	bne.n	800206e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	2120      	movs	r1, #32
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f85d 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e053      	b.n	80020d8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002048:	b29a      	uxth	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3302      	adds	r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	e030      	b.n	80020b8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	b29b      	uxth	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b29a      	uxth	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	e024      	b.n	80020b8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	2120      	movs	r1, #32
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f831 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e027      	b.n	80020d8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d108      	bne.n	80020a2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60ba      	str	r2, [r7, #8]
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e00a      	b.n	80020b8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1c59      	adds	r1, r3, #1
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d19d      	bne.n	8001ffe <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f0:	e02c      	b.n	800214c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f8:	d028      	beq.n	800214c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <UART_WaitOnFlagUntilTimeout+0x30>
 8002100:	f7fe ffa4 	bl	800104c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	429a      	cmp	r2, r3
 800210e:	d21d      	bcs.n	800214c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800211e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e00f      	b.n	800216c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	429a      	cmp	r2, r3
 8002168:	d0c3      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021b4:	f023 030c 	bic.w	r3, r3, #12
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	430b      	orrs	r3, r1
 80021c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e0:	f040 80e4 	bne.w	80023ac <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4aab      	ldr	r2, [pc, #684]	; (8002498 <UART_SetConfig+0x324>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <UART_SetConfig+0x84>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4aaa      	ldr	r2, [pc, #680]	; (800249c <UART_SetConfig+0x328>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d16c      	bne.n	80022d2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021f8:	f7ff fdd2 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009a      	lsls	r2, r3, #2
 8002206:	441a      	add	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4aa3      	ldr	r2, [pc, #652]	; (80024a0 <UART_SetConfig+0x32c>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	011c      	lsls	r4, r3, #4
 800221c:	f7ff fdc0 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002220:	4602      	mov	r2, r0
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009a      	lsls	r2, r3, #2
 800222a:	441a      	add	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fbb2 f5f3 	udiv	r5, r2, r3
 8002236:	f7ff fdb3 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800223a:	4602      	mov	r2, r0
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009a      	lsls	r2, r3, #2
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a93      	ldr	r2, [pc, #588]	; (80024a0 <UART_SetConfig+0x32c>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2264      	movs	r2, #100	; 0x64
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	1aeb      	subs	r3, r5, r3
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	3332      	adds	r3, #50	; 0x32
 8002264:	4a8e      	ldr	r2, [pc, #568]	; (80024a0 <UART_SetConfig+0x32c>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002272:	441c      	add	r4, r3
 8002274:	f7ff fd94 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002278:	4602      	mov	r2, r0
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009a      	lsls	r2, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fbb2 f5f3 	udiv	r5, r2, r3
 800228e:	f7ff fd87 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002292:	4602      	mov	r2, r0
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	009a      	lsls	r2, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	4a7d      	ldr	r2, [pc, #500]	; (80024a0 <UART_SetConfig+0x32c>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2264      	movs	r2, #100	; 0x64
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	1aeb      	subs	r3, r5, r3
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	3332      	adds	r3, #50	; 0x32
 80022bc:	4a78      	ldr	r2, [pc, #480]	; (80024a0 <UART_SetConfig+0x32c>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	f003 0207 	and.w	r2, r3, #7
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4422      	add	r2, r4
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e154      	b.n	800257c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022d2:	f7ff fd51 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	4a6c      	ldr	r2, [pc, #432]	; (80024a0 <UART_SetConfig+0x32c>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	011c      	lsls	r4, r3, #4
 80022f6:	f7ff fd3f 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002310:	f7ff fd32 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002314:	4602      	mov	r2, r0
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	441a      	add	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4a5d      	ldr	r2, [pc, #372]	; (80024a0 <UART_SetConfig+0x32c>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	2264      	movs	r2, #100	; 0x64
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	1aeb      	subs	r3, r5, r3
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	3332      	adds	r3, #50	; 0x32
 800233e:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <UART_SetConfig+0x32c>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800234c:	441c      	add	r4, r3
 800234e:	f7ff fd13 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002352:	4602      	mov	r2, r0
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009a      	lsls	r2, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fbb2 f5f3 	udiv	r5, r2, r3
 8002368:	f7ff fd06 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800236c:	4602      	mov	r2, r0
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009a      	lsls	r2, r3, #2
 8002376:	441a      	add	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4a47      	ldr	r2, [pc, #284]	; (80024a0 <UART_SetConfig+0x32c>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	2264      	movs	r2, #100	; 0x64
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	1aeb      	subs	r3, r5, r3
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	3332      	adds	r3, #50	; 0x32
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <UART_SetConfig+0x32c>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	f003 0207 	and.w	r2, r3, #7
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4422      	add	r2, r4
 80023a8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80023aa:	e0e7      	b.n	800257c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <UART_SetConfig+0x324>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <UART_SetConfig+0x24c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a38      	ldr	r2, [pc, #224]	; (800249c <UART_SetConfig+0x328>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d171      	bne.n	80024a4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023c0:	f7ff fcee 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009a      	lsls	r2, r3, #2
 80023ce:	441a      	add	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <UART_SetConfig+0x32c>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	011c      	lsls	r4, r3, #4
 80023e4:	f7ff fcdc 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	441a      	add	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80023fe:	f7ff fccf 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002402:	4602      	mov	r2, r0
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <UART_SetConfig+0x32c>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2264      	movs	r2, #100	; 0x64
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	1aeb      	subs	r3, r5, r3
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	; 0x32
 800242c:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <UART_SetConfig+0x32c>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	441c      	add	r4, r3
 800243a:	f7ff fcb1 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800243e:	4602      	mov	r2, r0
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009a      	lsls	r2, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fbb2 f5f3 	udiv	r5, r2, r3
 8002454:	f7ff fca4 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002458:	4602      	mov	r2, r0
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	441a      	add	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <UART_SetConfig+0x32c>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	2264      	movs	r2, #100	; 0x64
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	1aeb      	subs	r3, r5, r3
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	3332      	adds	r3, #50	; 0x32
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <UART_SetConfig+0x32c>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	f003 020f 	and.w	r2, r3, #15
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4422      	add	r2, r4
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	e071      	b.n	800257c <UART_SetConfig+0x408>
 8002498:	40011000 	.word	0x40011000
 800249c:	40011400 	.word	0x40011400
 80024a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024a4:	f7ff fc68 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009a      	lsls	r2, r3, #2
 80024b2:	441a      	add	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4a31      	ldr	r2, [pc, #196]	; (8002584 <UART_SetConfig+0x410>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	011c      	lsls	r4, r3, #4
 80024c8:	f7ff fc56 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	441a      	add	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	fbb2 f5f3 	udiv	r5, r2, r3
 80024e2:	f7ff fc49 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <UART_SetConfig+0x410>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2264      	movs	r2, #100	; 0x64
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	1aeb      	subs	r3, r5, r3
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	3332      	adds	r3, #50	; 0x32
 8002510:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <UART_SetConfig+0x410>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251c:	441c      	add	r4, r3
 800251e:	f7ff fc2b 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002522:	4602      	mov	r2, r0
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009a      	lsls	r2, r3, #2
 800252c:	441a      	add	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fbb2 f5f3 	udiv	r5, r2, r3
 8002538:	f7ff fc1e 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800253c:	4602      	mov	r2, r0
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009a      	lsls	r2, r3, #2
 8002546:	441a      	add	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <UART_SetConfig+0x410>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	2264      	movs	r2, #100	; 0x64
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	1aeb      	subs	r3, r5, r3
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	3332      	adds	r3, #50	; 0x32
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <UART_SetConfig+0x410>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4422      	add	r2, r4
 8002578:	609a      	str	r2, [r3, #8]
}
 800257a:	e7ff      	b.n	800257c <UART_SetConfig+0x408>
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bdb0      	pop	{r4, r5, r7, pc}
 8002584:	51eb851f 	.word	0x51eb851f

08002588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af02      	add	r7, sp, #8


	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 800258e:	f7fe fcf7 	bl	8000f80 <HAL_Init>

	  /* USER CODE BEGIN Init */

	  rdsp_context_init(&Context, RX, TX, NULL);
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <main+0xd0>)
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <main+0xd4>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	4830      	ldr	r0, [pc, #192]	; (8002660 <main+0xd8>)
 800259e:	f7fd ffdf 	bl	8000560 <rdsp_context_init>

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 80025a2:	f000 f877 	bl	8002694 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 80025a6:	f000 f90b 	bl	80027c0 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 80025aa:	f000 f8df 	bl	800276c <MX_USART2_UART_Init>
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {

		  switch(state)
 80025ae:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <main+0xdc>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d84b      	bhi.n	800264e <main+0xc6>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <main+0x34>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025fb 	.word	0x080025fb
 80025c4:	08002611 	.word	0x08002611
 80025c8:	08002621 	.word	0x08002621
		  {
			  case ESPERANDO_FILTRO :

				  status = HAL_UART_Receive(&huart2, RX_Data, RX_BUFFER_LEN, USART_TIMEOUT);
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d0:	220a      	movs	r2, #10
 80025d2:	4925      	ldr	r1, [pc, #148]	; (8002668 <main+0xe0>)
 80025d4:	4825      	ldr	r0, [pc, #148]	; (800266c <main+0xe4>)
 80025d6:	f7ff fcdd 	bl	8001f94 <HAL_UART_Receive>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <main+0xe8>)
 80025e0:	701a      	strb	r2, [r3, #0]

				  if(status != HAL_TIMEOUT)
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <main+0xe8>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d003      	beq.n	80025f2 <main+0x6a>
				  {
					  state = INSTANCIANDO_FILTRO;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <main+0xdc>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
				  }

				  else state = ESPERANDO_FILTRO;

				  break;
 80025f0:	e031      	b.n	8002656 <main+0xce>
				  else state = ESPERANDO_FILTRO;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <main+0xdc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
				  break;
 80025f8:	e02d      	b.n	8002656 <main+0xce>
			  case INSTANCIANDO_FILTRO :

				  arm_fir_init_q15(&S, numTaps, pCoeffs, pState, blockSize);
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <main+0xec>)
 80025fc:	8819      	ldrh	r1, [r3, #0]
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <main+0xf0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <main+0xf4>)
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <main+0xf8>)
 8002608:	481e      	ldr	r0, [pc, #120]	; (8002684 <main+0xfc>)
 800260a:	f7fd ffc9 	bl	80005a0 <arm_fir_init_q15>

				  break;
 800260e:	e022      	b.n	8002656 <main+0xce>

			  case PROCESAR :

				  arm_fir_q15(&S, pSrc, pDst, blockSize);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <main+0xf0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <main+0x100>)
 8002616:	491d      	ldr	r1, [pc, #116]	; (800268c <main+0x104>)
 8002618:	481a      	ldr	r0, [pc, #104]	; (8002684 <main+0xfc>)
 800261a:	f7fd fff1 	bl	8000600 <arm_fir_q15>

				  break;
 800261e:	e01a      	b.n	8002656 <main+0xce>
			  case ENVIAR_RESULTADO :

				  status = HAL_UART_Transmit(&huart2, TX_Data, TX_BUFFER_LEN, USART_TIMEOUT);
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002624:	220a      	movs	r2, #10
 8002626:	491a      	ldr	r1, [pc, #104]	; (8002690 <main+0x108>)
 8002628:	4810      	ldr	r0, [pc, #64]	; (800266c <main+0xe4>)
 800262a:	f7ff fc1a 	bl	8001e62 <HAL_UART_Transmit>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <main+0xe8>)
 8002634:	701a      	strb	r2, [r3, #0]

				  if(status != HAL_TIMEOUT)
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <main+0xe8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d003      	beq.n	8002646 <main+0xbe>
				  {
					  state = ESPERANDO_FILTRO;
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <main+0xdc>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
				  }

				  else state = ENVIAR_RESULTADO;

				  break;
 8002644:	e007      	b.n	8002656 <main+0xce>
				  else state = ENVIAR_RESULTADO;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <main+0xdc>)
 8002648:	2203      	movs	r2, #3
 800264a:	701a      	strb	r2, [r3, #0]
				  break;
 800264c:	e003      	b.n	8002656 <main+0xce>
			  default :

				  state = ESPERANDO_FILTRO;
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <main+0xdc>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
				  break;
 8002654:	bf00      	nop
		  switch(state)
 8002656:	e7aa      	b.n	80025ae <main+0x26>
 8002658:	2000000c 	.word	0x2000000c
 800265c:	20000010 	.word	0x20000010
 8002660:	2000007c 	.word	0x2000007c
 8002664:	20000034 	.word	0x20000034
 8002668:	2000030c 	.word	0x2000030c
 800266c:	20000318 	.word	0x20000318
 8002670:	20000358 	.word	0x20000358
 8002674:	20000006 	.word	0x20000006
 8002678:	20000008 	.word	0x20000008
 800267c:	20000170 	.word	0x20000170
 8002680:	20000038 	.word	0x20000038
 8002684:	20000300 	.word	0x20000300
 8002688:	2000009c 	.word	0x2000009c
 800268c:	20000238 	.word	0x20000238
 8002690:	20000164 	.word	0x20000164

08002694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b094      	sub	sp, #80	; 0x50
 8002698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269a:	f107 0320 	add.w	r3, r7, #32
 800269e:	2230      	movs	r2, #48	; 0x30
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa26 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <SystemClock_Config+0xd0>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <SystemClock_Config+0xd0>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6413      	str	r3, [r2, #64]	; 0x40
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <SystemClock_Config+0xd0>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <SystemClock_Config+0xd4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <SystemClock_Config+0xd4>)
 80026e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <SystemClock_Config+0xd4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026f4:	2302      	movs	r3, #2
 80026f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026fc:	2310      	movs	r3, #16
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002700:	2302      	movs	r3, #2
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002704:	2300      	movs	r3, #0
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002708:	2310      	movs	r3, #16
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800270c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002712:	2304      	movs	r3, #4
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002716:	2307      	movs	r3, #7
 8002718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271a:	f107 0320 	add.w	r3, r7, #32
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe ff22 	bl	8001568 <HAL_RCC_OscConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800272a:	f000 f8b9 	bl	80028a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272e:	230f      	movs	r3, #15
 8002730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f94e 	bl	80019ec <HAL_RCC_ClockConfig>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002756:	f000 f8a3 	bl	80028a0 <Error_Handler>
  }
}
 800275a:	bf00      	nop
 800275c:	3750      	adds	r7, #80	; 0x50
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000

0800276c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <MX_USART2_UART_Init+0x50>)
 8002774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800277c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002792:	220c      	movs	r2, #12
 8002794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 80027a4:	f7ff fb10 	bl	8001dc8 <HAL_UART_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ae:	f000 f877 	bl	80028a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000318 	.word	0x20000318
 80027bc:	40004400 	.word	0x40004400

080027c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <MX_GPIO_Init+0xd0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <MX_GPIO_Init+0xd0>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <MX_GPIO_Init+0xd0>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <MX_GPIO_Init+0xd0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <MX_GPIO_Init+0xd0>)
 80027fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <MX_GPIO_Init+0xd0>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <MX_GPIO_Init+0xd0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <MX_GPIO_Init+0xd0>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <MX_GPIO_Init+0xd0>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <MX_GPIO_Init+0xd0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <MX_GPIO_Init+0xd0>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <MX_GPIO_Init+0xd0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	2120      	movs	r1, #32
 800284a:	4812      	ldr	r0, [pc, #72]	; (8002894 <MX_GPIO_Init+0xd4>)
 800284c:	f7fe fe72 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <MX_GPIO_Init+0xd8>)
 8002858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	480d      	ldr	r0, [pc, #52]	; (800289c <MX_GPIO_Init+0xdc>)
 8002866:	f7fe fce3 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800286a:	2320      	movs	r3, #32
 800286c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	4804      	ldr	r0, [pc, #16]	; (8002894 <MX_GPIO_Init+0xd4>)
 8002882:	f7fe fcd5 	bl	8001230 <HAL_GPIO_Init>

}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	10210000 	.word	0x10210000
 800289c:	40020800 	.word	0x40020800

080028a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_MspInit+0x4c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_MspInit+0x4c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_MspInit+0x4c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_MspInit+0x4c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <HAL_MspInit+0x4c>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_MspInit+0x4c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028ee:	2007      	movs	r0, #7
 80028f0:	f7fe fc6a 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_UART_MspInit+0x84>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12b      	bne.n	800297a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_UART_MspInit+0x88>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_UART_MspInit+0x88>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_UART_MspInit+0x88>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_UART_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_UART_MspInit+0x88>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_UART_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800295a:	230c      	movs	r3, #12
 800295c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800296a:	2307      	movs	r3, #7
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_UART_MspInit+0x8c>)
 8002976:	f7fe fc5b 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40004400 	.word	0x40004400
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000

08002990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <MemManage_Handler+0x4>

080029aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <BusFault_Handler+0x4>

080029b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <UsageFault_Handler+0x4>

080029b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e4:	f7fe fb1e 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <SystemInit+0x60>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <SystemInit+0x60>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <SystemInit+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <SystemInit+0x64>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <SystemInit+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <SystemInit+0x64>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <SystemInit+0x64>)
 8002a18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <SystemInit+0x64>)
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <SystemInit+0x68>)
 8002a26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <SystemInit+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <SystemInit+0x64>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <SystemInit+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SystemInit+0x60>)
 8002a3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a40:	609a      	str	r2, [r3, #8]
#endif
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	24003010 	.word	0x24003010

08002a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a5e:	e003      	b.n	8002a68 <LoopCopyDataInit>

08002a60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a66:	3104      	adds	r1, #4

08002a68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a68:	480b      	ldr	r0, [pc, #44]	; (8002a98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a70:	d3f6      	bcc.n	8002a60 <CopyDataInit>
  ldr  r2, =_sbss
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a74:	e002      	b.n	8002a7c <LoopFillZerobss>

08002a76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a78:	f842 3b04 	str.w	r3, [r2], #4

08002a7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a80:	d3f9      	bcc.n	8002a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a82:	f7ff ffb3 	bl	80029ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a86:	f000 f811 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8a:	f7ff fd7d 	bl	8002588 <main>
  bx  lr    
 8002a8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a90:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8002a94:	08002b44 	.word	0x08002b44
  ldr  r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a9c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002aa0:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8002aa4:	2000035c 	.word	0x2000035c

08002aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC_IRQHandler>
	...

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0d      	ldr	r6, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	42a5      	cmp	r5, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4e0b      	ldr	r6, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 f820 	bl	8002b04 <_init>
 8002ac4:	1ba4      	subs	r4, r4, r6
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2500      	movs	r5, #0
 8002aca:	42a5      	cmp	r5, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad4:	4798      	blx	r3
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ade:	4798      	blx	r3
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002b3c 	.word	0x08002b3c
 8002ae8:	08002b3c 	.word	0x08002b3c
 8002aec:	08002b3c 	.word	0x08002b3c
 8002af0:	08002b40 	.word	0x08002b40

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
